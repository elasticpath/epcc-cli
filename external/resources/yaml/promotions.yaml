
promotion-codes:
  singular-name: "promotion-code"
  json-api-type: "promotion_codes"
  json-api-format: "legacy"
  docs: "https://elasticpath.dev/docs/commerce-manager/promotions-builder/creating-promotion-codes"
  get-collection:
    docs: "https://elasticpath.dev/docs/api/promotions/get-promotion-codes"
    url: "/v2/promotions/{promotions}/codes"
  get-entity:
    docs: "https://elasticpath.dev/docs/commerce-manager/promotions-builder/creating-promotion-codes"
    url: "/v2/promotions/{promotions}/codes"
  delete-entity:
    docs: "https://elasticpath.dev/docs/api/promotions/delete-a-promotion-code"
    url: "/v2/promotions/{promotions}/codes/{promotion_codes}"
  create-entity:
    docs: "https://elasticpath.dev/docs/api/promotions/create-promotion-codes"
    url: "/v2/promotions/{promotions}/codes"
    content-type: application/json
  attributes:
    codes[n].code:
      type: STRING
    codes[n].uses:
      type: INT
    codes[n].user:
      type: STRING
    consume_unit:
      type: ENUM:per_item,per_cart
promotions:
  singular-name: "promotion"
  json-api-type: "promotion"
  json-api-format: "legacy"
  docs: "https://elasticpath.dev/docs/api/promotions/update-a-promotion"

  get-collection:
    docs: "https://elasticpath.dev/docs/api/promotions/get-all-promotions"
    url: "/v2/promotions"
  get-entity:
    docs: "https://elasticpath.dev/docs/api/promotions/get-all-promotions"
    url: "/v2/promotions/{promotions}"
  delete-entity:
    docs: "https://elasticpath.dev/docs/api/promotions/delete-a-promotion"
    url: "/v2/promotions/{promotions}"
  create-entity:
    docs: "https://elasticpath.dev/docs/api/promotions/create-a-promotion"
    url: "/v2/promotions"
    content-type: application/json
  update-entity:
    docs: "https://elasticpath.dev/docs/api/promotions/update-a-promotion"
    url: "/v2/promotions/{promotions}"
  attributes:
    name:
      type: STRING
    description:
      type: STRING
    enabled:
      type: BOOL
      autofill: VALUE:True
    automatic:
      type: BOOL
    promotion_type:
      type: ENUM:fixed_discount,percent_discount,x_for_y,x_for_amount,bundle_fixed_discount,item_fixed_discount,item_percent_discount,bundle_gift
    start:
      type: STRING
    end:
      type: STRING
    max_discount_value[n].amount:
      type: INT
    max_discount_value[n].currency:
      type: CURRENCY
    min_cart_value[n].currency:
      type: CURRENCY
    min_cart_value[n].amount:
      type: INT
    max_applications_per_cart:
      type: INT
    schema.currencies[n].currency:
      type: CURRENCY
    schema.currencies[n].amount:
      type: INT
    schema.exclude.targets[n]:
      type: STRING


rule-promotions:
  singular-name: "rule-promotion"
  json-api-type: "rule_promotion"
  json-api-format: "legacy"
  docs: "https://elasticpath.dev/docs/promotions-builder/overview"
  get-collection:
    docs: "https://elasticpath.dev/docs/api/promotions-builder/get-rule-promotions"
    url: "/v2/rule-promotions"
    openapi-operation-id: "getRulePromotions"
    query:
      - name: filter
      - name: page[limit]
      - name: page[offset]
  get-entity:
    docs: "https://elasticpath.dev/docs/api/promotions-builder/get-rule-promotion-by-id"
    url: "/v2/rule-promotions/{rule_promotions}"
    openapi-operation-id: "getRulePromotionById"
  create-entity:
    docs: "https://elasticpath.dev/docs/api/promotions-builder/create-rule-promotion"
    url: "/v2/rule-promotions"
    openapi-operation-id: "createRulePromotion"
  update-entity:
    docs: "https://elasticpath.dev/docs/api/promotions-builder/update-rule-promotion"
    url: "/v2/rule-promotions/{rule_promotions}"
    openapi-operation-id: "updateRulePromotion"
  delete-entity:
    docs: "https://elasticpath.dev/docs/api/promotions-builder/delete-rule-promotion"
    url: "/v2/rule-promotions/{rule_promotions}"
    openapi-operation-id: "deleteRulePromotion"
  attributes:
    name:
      type: STRING
      autofill: FUNC:Name
      usage: "The name of the promotion"
    description:
      type: STRING
      autofill: FUNC:Phrase
      usage: "The description of the promotion"
    enabled:
      type: BOOL
      autofill: VALUE:true
      usage: "Whether the promotion is enabled or not"
    automatic:
      type: BOOL
      autofill: VALUE:true
      usage: "If true the promtion is automatically added to cart otherwise you must create codes manually"
    priority:
      type: INT
      usage: "A number that represents the priority order, larger numbers are higher priority promotions"
    stackable:
      type: BOOL
      usage: "A boolean that indicates whether this promotion is stackable with other promotions"
    override_stacking:
      type: BOOL
      usage: "A boolean that indicates that this promotion can be stacked with an otherwise non-stackable promotion"
    start:
      type: STRING
      autofill: VALUE:"{{ now | date_modify "-24h" | date "2006-01-02" }}"
      usage: "Specifies the start date and time of the promotion or the start date of the promotion"
    end:
      type: STRING
      autofill: VALUE:"{{ now | date_modify "+168h" | date "2006-01-02" }}"
      usage: "Specifies the end date and time of the promotion or the end date of the promotion"
    rule_set.rules.strategy:
      type: ENUM:account_tags,cart_total,cart_custom_attribute,item_price,item_sku,item_product_id,item_quantity,item_category,item_attribute,item_identifier,items_bundle,and,or
    rule_set.rules.operator:
      type: ENUM:in,nin,eq,lt,lte,gt,gte,range
      usage: "The strategies cart_total, item_price, and item_quantity support the operators [gt, lt, gte, lte, eq].  Strategies cart_custom_attribute, item_sku, item_product_id, item_identifier, item_category, and item_attribute support the operators [in, nin]."
    rule_set.rules.args[n]:
      type: STRING
    rule_set.rules.children[n].strategy:
      type: ENUM:account_tags,cart_total,cart_custom_attribute,item_price,item_sku,item_product_id,item_quantity,item_category,item_attribute,item_identifier,items_bundle,and,or
    rule_set.rules.children[n].operator:
      type: ENUM:in,nin,eq,lt,lte,gt,gte
    rule_set.rules.children[n].args[n]:
      type: STRING
    rule_set.catalog_ids[n]:
      type: RESOURCE_ID:pcm-catalog
      usage: "Specifies the catalogs that are eligible for the promotion (if not set it applies to all catalogs)"
    rule_set.currencies[n]:
      type: CURRENCY
      usage: "Specifies the currencies that are applied to the promotion."
    rule_set.actions[n].strategy:
      type: ENUM:cart_discount,item_discount,shipping_discount,item_bundle_discount
    rule_set.actions[n].args[0]:
      type: CONDITIONAL
      conditions:
        - type: ENUM:percent,fixed
          when: rule_set.actions[n].strategy == "cart_discount"
        - type: ENUM:percent,fixed,fixed_price
          when: rule_set.actions[n].strategy == "item_discount"
        - type: ENUM:percent,fixed,fixed_price
          when: rule_set.actions[n].strategy == "shipping_discount"
        - type: ENUM:percent,fixed,fixed_price
          when: rule_set.actions[n].strategy == "bundle_discount"
    rule_set.actions[n].args[1]:
      type: CONDITIONAL
      conditions:
        - type: INT
          when: rule_set.actions[n].args[0] == "fixed"
          usage: "The fixed amount to discount"
        - type: INT
          when: rule_set.actions[n].args[0] == "percent"
          usage: "The percentage to discount"
        - type: INT
          when: rule_set.actions[n].args[0] == "fixed_price" && rule_set.actions[n].strategy == "item_discount"
          usage: "Quantity of eligble items to include in the discount"
        - type: INT
          when: rule_set.actions[n].args[0] == "fixed_price" && rule_set.actions[n].strategy == "shipping_discount"
          usage: "Set the amount to this value"
        - type: INT
          when: rule_set.actions[n].args[0] == "fixed_price" && rule_set.actions[n].strategy == "bundle_discount"
          usage: "Set the amount to this value"
    rule_set.actions[n].args[2]:
      type: INT
      when: rule_set.actions[n].strategy == "item_discount" || rule_set.actions[n].args[0] == "fixed_price"
      usage: "The fixed price to apply to the item"

    rule_set.actions[n].condition.strategy:
      # Looking at the code, this can accept anything
      type: ENUM:and,or,cart_total,cart_custom_attribute,item_price,item_sku,item_product_id,item_identifier,item_quantity,item_category,item_attribute,items_bundle
    rule_set.actions[n].condition.operator:
      type: ENUM:in,nin,eq,lt,lte,gt,gte
    rule_set.actions[n].condition.args[n]:
      type: STRING
    rule_set.actions[n].limitations.max_quantity:
      type: INT
    rule_set.actions[n].limitations.max_discount:
      type: INT
    rule_set.actions[n].limitations.items[n].max_items:
      type: INT
    rule_set.actions[n].limitations.items[n].price_strategy:
      type: ENUM:cheapest,expensive
rule-promotion-codes:
  singular-name: "rule-promotion-code"
  json-api-type: "promotion_codes"
  json-api-format: "legacy"
  docs: "https://elasticpath.dev/docs/commerce-manager/promotions-builder/creating-promotion-codes"
  get-collection:
    docs: "https://elasticpath.dev/docs/api/promotions-builder/get-rule-promotion-codes"
    url: "/v2/rule-promotions/{rule_promotions}/codes"
    openapi-operation-id: "getRulePromotionCodes"
    query:
      - name: filter
      - name: sort
  get-entity:
    docs: "https://elasticpath.dev/docs/api/promotions-builder/get-rule-promotion-codes"
    url: "/v2/rule-promotions/{rule_promotions}/codes"
    openapi-operation-id: "getRulePromotionCodes"
    query:
      - name: filter
      - name: sort
  delete-entity:
    docs: "https://elasticpath.dev/docs/api/promotions/delete-a-promotion-code"
    url: "/v2/rule-promotions/{rule_promotions}/codes/{rule_promotion_codes}"
    openapi-operation-id: "deleteSingleRulePromotionCode"
  create-entity:
    docs: "https://elasticpath.dev/docs/api/promotions-builder/create-rule-promotion-codes"
    url: "/v2/rule-promotions/{rule_promotions}/codes"
    openapi-operation-id: "createRulePromotionCodes"
  attributes:
    codes[n].code:
      type: STRING
      usage: "The code to use for the promotion"
    codes[n].uses:
      type: INT
      usage: "The number of times the code can be used."
    codes[n].user:
      type: STRING
      usage: "The customer ID who can use the code, accounts are not supported."
    codes[n].consume_unit:
      type: ENUM:per_application,per_checkout
      usage: "Per checkout uses one usage per cart checkout, per application can use multiple if it applies multiple times (e.g., for different items)"
    codes[n].max_uses_per_shopper.includes_guest:
      type: BOOL
      usage: "If true limit the code to anonymous shoppers"
    codes[n].max_uses_per_shopper.max_uses:
      type: INT
      usage: "Maximum number of times it can be used by a single shopper"
    codes[n].is_for_new_shopper:
      type: BOOL
      usage: "If true this code/coupon can only apply to shoppers without any paid order."
